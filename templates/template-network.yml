AWSTemplateFormatVersion: '2010-09-09'
Description: This stack deploys a specific network with both public and private subnets.

###############################################################################
# Parameters
###############################################################################
Parameters:
  AMI:
    Description: Amazon Machine Image for Bastion
    Type: String
    # Defaults to us-west-2 Amazon Linux 2 AMI that includes aws-cli
    Default: 'ami-04b762b4289fba92b'
  Environment:
    Description: Environemnt type
    Type: String
    AllowedValues:
      - production
      - staging
      - development
    ConstraintDescription: Must specify production, staging, or development
    Default: development
  DomainName:
    Description: Your domain name
    Type: String
  S3BucketForSSH:
    Description: S3 bucket name with the ssh keys for bastion
    Type: String
  S3BucketForTemplates:
    Description: S3 Bucket holding this templates
    Type: String

###############################################################################
# Mappings
###############################################################################

Mappings:
  # Hard values for the subnet masks.
  development:
    VPC:
      CIDR: '10.0.0.0/16'
    PublicOne:
      CIDR: '10.0.0.0/18'
    PublicTwo:
      CIDR: '10.0.64.0/18'
    PrivateOne:
      CIDR: '10.0.128.0/18'
    PrivateTwo:
      CIDR: '10.0.192.0/18'
  staging:
    VPC:
      CIDR: '10.2.0.0/16'
    PublicOne:
      CIDR: '10.2.0.0/18'
    PublicTwo:
      CIDR: '10.2.64.0/18'
    PrivateOne:
      CIDR: '10.2.128.0/18'
    PrivateTwo:
      CIDR: '10.2.192.0/18'
  production:
    VPC:
      CIDR: '10.4.0.0/16'
    PublicOne:
      CIDR: '10.4.0.0/18'
    PublicTwo:
      CIDR: '10.4.64.0/18'
    PrivateOne:
      CIDR: '10.4.128.0/18'
    PrivateTwo:
      CIDR: '10.4.192.0/18'

###############################################################################
# Resources
###############################################################################

Resources:
  # VPC in which containers will be networked.
  # It has two public subnets, and two private subnets.
  # We distribute the subnets across the first two available subnets
  # for the region, for high availability.
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: !FindInMap
        - !Ref Environment
        - VPC
        - CIDR

  # Two public subnets
  PublicSubnetOne:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      VpcId:
        Ref: VPC
      CidrBlock: !FindInMap
        - !Ref Environment
        - PublicOne
        - CIDR
      MapPublicIpOnLaunch: true
  PublicSubnetTwo:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select
      - 1
      - Fn::GetAZs: !Ref 'AWS::Region'
      VpcId:
        Ref: VPC
      CidrBlock: !FindInMap
        - !Ref Environment
        - PublicTwo
        - CIDR
      MapPublicIpOnLaunch: true

  # Two private subnets
  PrivateSubnetOne:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select
      - 0
      - Fn::GetAZs: !Ref 'AWS::Region'
      VpcId:
        Ref: VPC
      CidrBlock: !FindInMap
        - !Ref Environment
        - PrivateOne
        - CIDR
  PrivateSubnetTwo:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select
      - 1
      - Fn::GetAZs: !Ref 'AWS::Region'
      VpcId:
        Ref: VPC
      CidrBlock: !FindInMap
        - !Ref Environment
        - PrivateTwo
        - CIDR

  # A SubnetGroup for the database
  PrivateDBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet Group for the database
      SubnetIds:
        - Ref: PrivateSubnetOne
        - Ref: PrivateSubnetTwo

  # Setup networking resources for the public subnets. Containers
  # in the public subnets have public IP addresses and the routing table
  # sends network traffic via the internet gateway.
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
  GatewayAttachement:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId:
        Ref: VPC
      InternetGatewayId:
        Ref: InternetGateway
  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId:
        Ref: VPC
  PublicRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: GatewayAttachement
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId:
        Ref: InternetGateway
  PublicSubnetOneRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId:
        Ref: PublicSubnetOne
      RouteTableId:
        Ref: PublicRouteTable
  PublicSubnetTwoRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId:
        Ref: PublicSubnetTwo
      RouteTableId:
        Ref: PublicRouteTable
  # Setup networking resources for the private subnets. Containers
  # in these subnets have only private IP addresses, and must use a NAT
  # gateway to talk to the internet. We launch two NAT gateways, one for
  # each private subnet.
  NatGatewayOneAttachment:
    Type: 'AWS::EC2::EIP'
    DependsOn: GatewayAttachement
    Properties:
      Domain: VPC
  NatGatewayTwoAttachment:
    Type: 'AWS::EC2::EIP'
    DependsOn: GatewayAttachement
    Properties:
      Domain: VPC
  NatGatewayOne:
    Type: 'AWS::EC2::NatGateway'
    Properties:
      AllocationId: !GetAtt NatGatewayOneAttachment.AllocationId
      SubnetId:
        Ref: PublicSubnetOne
  NatGatewayTwo:
    Type: 'AWS::EC2::NatGateway'
    Properties:
      AllocationId: !GetAtt NatGatewayTwoAttachment.AllocationId
      SubnetId:
        Ref: PublicSubnetTwo
  PrivateRouteTableOne:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId:
        Ref: VPC
  PrivateRouteOne:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId:
        Ref: PrivateRouteTableOne
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: NatGatewayOne
  PrivateRouteTableOneAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId:
        Ref: PrivateRouteTableOne
      SubnetId:
        Ref: PrivateSubnetOne
  PrivateRouteTableTwo:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId:
        Ref: VPC
  PrivateRouteTwo:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId:
        Ref: PrivateRouteTableTwo
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: NatGatewayTwo
  PrivateRouteTableTwoAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId:
        Ref: PrivateRouteTableTwo
      SubnetId:
        Ref: PrivateSubnetTwo

  VPCEndpointSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group to control access to and from VPC Endpoints
      GroupName:
        !Sub '${Environment}-SG-VPCEndpoints'
      VpcId:
        Ref: VPC
      SecurityGroupIngress:
        # Ingress from inside the vpc
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp:
            Fn::GetAtt:
              - VPC
              - CidrBlock
      SecurityGroupEgress:
        # Egress to VPC
        - IpProtocol: -1
          FromPort: 0
          ToPort: 65535
          CidrIp:
            Fn::GetAtt:
              - VPC
              - CidrBlock
      Tags:
        -
          Key: Name
          Value: 'VPC Endpoint Security Group'

  ECRVPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !Ref VPCEndpointSecurityGroup
      ServiceName:
        !Sub 'com.amazonaws.${AWS::Region}.ecr.dkr'
      SubnetIds:
        - !Ref PublicSubnetOne
        - !Ref PublicSubnetTwo
      VpcEndpointType: Interface
      VpcId:
        Ref: VPC

  # This is an IAM role which authorizes ECS to manage resources on your
  # account on your behalf, such as updating your load balancer with the
  # details of where your containers are, so that traffic can reach your
  # containers.
  ECSRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ ecs.amazonaws.com ]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
      - PolicyName: !Sub '${Environment}-FargatePolicy'
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
              # Rules which allow ECS to attach network interfaces to instances
              # on your behalf in order for awsvpc networking mode to work right
              - 'ec2:AttachNetworkInterface'
              - 'ec2:CreateNetworkInterface'
              - 'ec2:CreateNetworkInterfacePermission'
              - 'ec2:DeleteNetworkInterface'
              - 'ec2:DeleteNetworkInterfacePermission'
              - 'ec2:Describe*'
              - 'ec2:DetachNetworkInterface'

              # Rules which allow ECS to update load balancers on your behalf
              # with the information about how to send traffic to your containers
              - 'elasticloadbalancing:DeregisterInstancesFromLoadBalancer'
              - 'elasticloadbalancing:DeregisterTargets'
              - 'elasticloadbalancing:Describe*'
              - 'elasticloadbalancing:RegisterInstancesWithLoadBalancer'
              - 'elasticloadbalancing:RegisterTargets'
            Resource: '*'

  # This is an IAM role used by the services to use resources on your account
  ECSTaskExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ecs-tasks.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
      - PolicyName: !Sub '${Environment}-TaskServicePolicy'
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
              # Allow the ECS Task to store information on S3
              - 's3:*'

              # Allow the ECS Tasks to download images from ECR
              - 'ecr:GetAuthorizationToken'
              - 'ecr:BatchCheckLayerAvailability'
              - 'ecr:GetDownloadUrlForLayer'
              - 'ecr:BatchGetImage'

              # Allow the ECS tasks to upload logs to CloudWatch
              - 'logs:CreateLogStream'
              - 'logs:PutLogEvents'

              # Allow the ECS task to get secrets
              - 'secretsmanager:GetSecretValue'
              - 'ssm:GetParameters'
            Resource: '*'

  Bastion:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL:
        !Sub 'https://s3.amazonaws.com/${S3BucketForTemplates}/template-bastion-host.yml'
      Parameters:
        S3BucketForSSH:
          !Ref S3BucketForSSH
        VPC:
          Ref: VPC
        Subnet:
          Ref: PublicSubnetOne
        Environment:
          !Ref Environment
        AMI:
          !Ref AMI

  PublicNamespace:
    Type: AWS::ServiceDiscovery::PublicDnsNamespace
    Properties:
      Description: 'Namespace to register public services with'
      Name:
        # e.g.: development.example.com
        !Sub '${Environment}.${DomainName}'

###############################################################################
# Outputs
###############################################################################

Outputs:
  VPC:
    Description: The ID of the VPC
    Value:
      Ref: VPC
    Export:
      Name: !Sub '${Environment}:VPC'
  VPCCIDR:
    Description: The CIDR of the VPC
    Value:
      Fn::GetAtt:
        - VPC
        - CidrBlock
    Export:
      Name: !Sub '${Environment}:VPCCIDR'
  PublicSubnetOne:
    Description: Public subnet one
    Value:
      Ref: PublicSubnetOne
    Export:
      Name: !Sub '${Environment}:PublicSubnetOne'
  PublicSubnetTwo:
    Description: Public subnet two
    Value:
      Ref: PublicSubnetTwo
    Export:
      Name: !Sub '${Environment}:PublicSubnetTwo'
  PrivateSubnetOne:
    Description: Private subnet one
    Value:
      Ref: PrivateSubnetOne
    Export:
      Name: !Sub '${Environment}:PrivateSubnetOne'
  PrivateSubnetTwo:
    Description: Private subnet two
    Value:
      Ref: PrivateSubnetTwo
    Export:
      Name: !Sub '${Environment}:PrivateSubnetTwo'

  AvailabilityZoneOne:
    Description: Availability Zone One
    Value: !Select
      - 0
      - Fn::GetAZs: !Ref 'AWS::Region'
    Export:
      Name: !Sub '${Environment}:AvailabilityZoneOne'
  AvailabilityZoneTwo:
    Description: Availability Zone Two
    Value: !Select
      - 1
      - Fn::GetAZs: !Ref 'AWS::Region'
    Export:
      Name: !Sub '${Environment}:AvailabilityZoneTwo'

  PrivateDBSubnetGroup:
    Description: Group of private subnets for the databases
    Value:
      Ref: PrivateDBSubnetGroup
    Export:
      Name: !Sub '${Environment}:PrivateDBSubnetGroup'
  ECSRole:
    Description: The ARN of the ECS role
    Value: !GetAtt 'ECSRole.Arn'
    Export:
      Name: !Sub '${Environment}:ECSRole'
  ECSTaskExecutionRole:
    Description: The ARN of the ECS role
    Value: !GetAtt 'ECSTaskExecutionRole.Arn'
    Export:
      Name: !Sub '${Environment}:ECSTaskExecutionRole'

  AvailabilityZoneCount:
    Description: Amount of AZs used
    Value: 2
    Export:
      Name: !Sub '${Environment}:AZCount'

  PublicNamespace:
    Description: Public Namespace where to register public services
    Value:
      Ref: PublicNamespace
    Export:
      Name: !Sub '${Environment}:PublicNamespace'